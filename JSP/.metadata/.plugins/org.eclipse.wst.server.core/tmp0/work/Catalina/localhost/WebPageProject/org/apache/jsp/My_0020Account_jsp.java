/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.27
 * Generated at: 2018-02-17 05:18:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import db.DBConnection;
import java.sql.*;
import java.io.*;
import javax.sql.*;

public final class My_0020Account_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("db.DBConnection");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./css/mystyle.css\"/>\r\n");
      out.write("<style>\r\n");
      out.write("\ttable.t1{\r\n");
      out.write("\t\tborder-top:#F3F1E9;\r\n");
      out.write("\t\tborder-left:#F3F1E9;\r\n");
      out.write("\t\tborder-right:#F3F1E9;\r\n");
      out.write("\t\ttext-align:center;\r\n");
      out.write("\t\tmargin-left:50%;\r\n");
      out.write("\t}\r\n");
      out.write("\tfont.fonts{ text-decoration:line-through }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

	Connection conn = null; // DB연결된 상태(세션)을 담은 객체
    Statement stmt=null;	//statement 객체
    PreparedStatement pstm = null;  // SQL 문을 나타내는 객체
    ResultSet rs = null;
    String currentId=null;
    String currentId2=null;
  	try{
  	  Cookie[] cookies=request.getCookies();
      for(int i=0;i<cookies.length;i++){
     		System.out.println(cookies[i].getName());
     		System.out.println(cookies[i].getValue());
      }
      currentId=cookies[1].getValue();
      int idx=currentId.indexOf("+");
      currentId2=currentId.substring(0,idx);
  	}
  	catch(Exception e){
  		System.out.println("로그인된 상태가 아님.");
  	}
    String checkId=null;
	String checkName=null;
	String checkEmail=null;
	int checkPoint=0;
	String checkSex=null;
	String checkBdate=null;
	String checkTel=null;
    if(currentId!=null){
    	String Sql="select * from HomepageUser where userId='"+currentId2+"'";
    	System.out.println(Sql);
    	try{
    		conn=DBConnection.getConnection();
    		pstm=conn.prepareStatement(Sql);
     		rs=pstm.executeQuery(Sql);
     		while(rs.next()){
     			checkId=rs.getString("userId");
     			checkName=rs.getString("name");
     			checkEmail=rs.getString("email");
     			checkPoint=rs.getInt("point");
     			checkSex=rs.getString("sex");
     			checkBdate=rs.getString("bdate");
     			checkTel=rs.getString("tel");
     		}
     	}
     	catch(Exception e){
     		System.out.println("올바르지 않은 입력2.");
     	}
    	finally{
    		System.out.println(checkId);
    		
    		try {
                if ( rs != null ){
                	rs.close();
                }   
                if ( pstm != null ){
                	pstm.close();
                }   
                if ( stmt != null ){
                	stmt.close(); 
                }
                if ( conn != null ){
                	conn.close(); 
                }
            }
            catch(Exception e) {
                throw new RuntimeException(e.getMessage());
            }
    		finally {
    			System.out.println("연결을 종료합니다.");
    		}
    	}
    }
    else{
    	System.out.println("로그인한 상태가 아님");
    }
	
      out.write("\r\n");
      out.write("\t<nav>\r\n");
      out.write("\t\t<h1>My Account</h1>\r\n");
      out.write("\t</nav>\r\n");
      out.write("\t</br></br>\r\n");
      out.write("\t");
if(checkId!=null){ 
      out.write("\r\n");
      out.write("\t\t<table border=\"1px solid black\" class=\"t1\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>아이디</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(checkId );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>이름</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(checkName );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>이메일</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(checkEmail );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>포인트</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(checkPoint );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>성별</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(checkSex );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>생일</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(checkBdate );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>전화번호</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(checkTel );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t");
} 
	else{
      out.write("\r\n");
      out.write("\t\t<p>로그인이 되어있지 않습니다.</p>\r\n");
      out.write("\t");
}
      out.write("\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t<a href=\"index.jsp\">Back to Home</a>\r\n");
      out.write("\t<br/>\r\n");
      out.write("\tCopyright (c) 2018 Web Shop\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
